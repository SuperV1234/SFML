#pragma once
#include <SFML/Copyright.hpp> // LICENSE AND COPYRIGHT (C) INFORMATION

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "SFML/Graphics/Export.hpp"

#include "SFML/Window/WindowContext.hpp"

#include "SFML/Base/InPlacePImpl.hpp"


////////////////////////////////////////////////////////////
// Forward declarations
////////////////////////////////////////////////////////////
namespace sf::priv
{
class GlContext;
class RenderTextureImplFBO;
} // namespace sf::priv

namespace sf
{
class Shader;
class Texture;
} // namespace sf


namespace sf
{
////////////////////////////////////////////////////////////
/// \brief TODO P1: docs
///
////////////////////////////////////////////////////////////
class [[nodiscard]] SFML_GRAPHICS_API GraphicsContext : public WindowContext
{
public:
    ////////////////////////////////////////////////////////////
    /// \brief Default constructor
    ///
    ////////////////////////////////////////////////////////////
    explicit GraphicsContext();

    ////////////////////////////////////////////////////////////
    /// \brief Destructor
    ///
    ////////////////////////////////////////////////////////////
    ~GraphicsContext();

    // Deleted copy operations
    GraphicsContext(const GraphicsContext&)            = delete;
    GraphicsContext& operator=(const GraphicsContext&) = delete;

    // Deleted move operations
    GraphicsContext(GraphicsContext&&)            = delete;
    GraphicsContext& operator=(GraphicsContext&&) = delete;

    ////////////////////////////////////////////////////////////
    /// \brief Returns the built-in shader
    ///
    ////////////////////////////////////////////////////////////
    [[nodiscard]] Shader& getBuiltInShader();

    ////////////////////////////////////////////////////////////
    /// \brief Returns the built-in 1x1 white texture
    ///
    ////////////////////////////////////////////////////////////
    [[nodiscard]] Texture& getBuiltInWhiteDotTexture();

    ////////////////////////////////////////////////////////////
    /// \brief Returns a pointer to the installed `GraphicsContext` if available, `nullptr` otherwise
    ///
    ////////////////////////////////////////////////////////////
    [[nodiscard]] static GraphicsContext* getInstalled();

    ////////////////////////////////////////////////////////////
    /// \brief Returns the installed `GraphicsContext` if available, aborts the program otherwise
    ///
    ////////////////////////////////////////////////////////////
    static GraphicsContext& ensureInstalled();

private:
    friend Shader;
    friend priv::RenderTextureImplFBO;

    using WindowContext::createGlContext; // Needed by befriended render texture implementations

    ////////////////////////////////////////////////////////////
    /// \brief Returns the built-in vertex shader source code
    ///
    ////////////////////////////////////////////////////////////
    [[nodiscard]] const char* getBuiltInShaderVertexSrc() const;

    ////////////////////////////////////////////////////////////
    /// \brief Returns the built-in fragment shader source code
    ///
    ////////////////////////////////////////////////////////////
    [[nodiscard]] const char* getBuiltInShaderFragmentSrc() const;

    ////////////////////////////////////////////////////////////
    // Member data
    ////////////////////////////////////////////////////////////
    struct Impl;
    base::InPlacePImpl<Impl, 512> m_impl; //!< Implementation details
};

} // namespace sf


////////////////////////////////////////////////////////////
/// \class sf::GraphicsContext
/// \ingroup graphics
///
/// TODO P1: docs
///
/// \see sf::GraphicsContext
///
////////////////////////////////////////////////////////////
